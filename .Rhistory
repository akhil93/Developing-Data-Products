verbatimTextOutput("predictors"),                                         #
h4('MODEL'),                                                              #Result Page
verbatimTextOutput("model"),                                              #
h4('Predicted MPG'),                                                      #
verbatimTextOutput("prediction")                                          #
)
)
)
library(shiny)
shinyUI(
pageWithSidebar(
headerPanel("Miles/(US) gallon prediction"),
sidebarPanel(
h4('This is a simple application which uses the mtcars data set from R and it takes 2 variables which is "hp" and "cyl" which stands for horsepower and number of cylinders. Using these two variables we try to predict the mileage of that vehicle.',
h4('Follow the below 3 steps'),                      #
h5('1. Select predictor/(s)'),                      #This Matter which will be displayed on
h5('2. Choose values for the predictors'),          #the sidebar
h5('3. Submit'),
hr(),
checkboxGroupInput("checkbox", label = h3("Select predictor/(s)"),              #middle part of sidebar
choices = list("Cylinders" = "cyl", "Horsepower" = "hp")),   #checkboxes for predictors
hr(),
h3('Select Values'),                                                       #the bottom portion of the sidebar
numericInput('cr', 'Number of cylinders', 4, min = 4, max = 8, step = 2),  #lets the user to select different values for
numericInput('hp', 'Gross horsepower', 50, min = 50, max = 350, step = 5), #number of cylinder and horsepower
hr(),
submitButton('Submit')
),
mainPanel(
h3('Result'),
h4('Predictors which were Selected'),                                     #
verbatimTextOutput("predictors"),                                         #
h4('MODEL'),                                                              #Result Page
verbatimTextOutput("model"),                                              #
h4('Predicted MPG'),                                                      #
verbatimTextOutput("prediction")                                          #
)
)
)
)
library(shiny)
shinyUI(
pageWithSidebar(
headerPanel("Miles/(US) gallon prediction"),
sidebarPanel(
h4('This is a simple application which uses the mtcars data set from R and it takes 2 variables which is "hp" and "cyl" which stands for horsepower and number of cylinders. Using these two variables we try to predict the mileage of that vehicle.',
h4('Follow the below 3 steps'),                      #
h5('1. Select predictor/(s)'),                      #This Matter which will be displayed on
h5('2. Choose values for the predictors'),          #the sidebar
h5('3. Submit'),
hr(),
checkboxGroupInput("checkbox", label = h3("Select predictor/(s)"),              #middle part of sidebar
choices = list("Cylinders" = "cyl", "Horsepower" = "hp")),   #checkboxes for predictors
hr(),
h3('Select Values'),                                                       #the bottom portion of the sidebar
numericInput('cr', 'Number of cylinders', 4, min = 4, max = 8, step = 2),  #lets the user to select different values for
numericInput('hp', 'Gross horsepower', 50, min = 50, max = 350, step = 5), #number of cylinder and horsepower
hr(),
submitButton('Submit')
),
mainPanel(
h3('Result'),
h4('Predictors which were Selected'),                                     #
verbatimTextOutput("predictors"),                                         #
h4('MODEL'),                                                              #Result Page
verbatimTextOutput("model"),                                              #
h4('Predicted MPG'),                                                      #
verbatimTextOutput("prediction")                                          #
)
)
)
)
)
library(shiny)
shinyUI(
pageWithSidebar(
headerPanel("Miles/(US) gallon prediction"),
sidebarPanel(
h4('This is a simple application which uses the mtcars data set from R and it takes 2 variables which is "hp" and "cyl" which stands for horsepower and number of cylinders. Using these two variables we try to predict the mileage of that vehicle.',
h4('Follow the below 3 steps'),                      #
h5('1. Select predictor/(s)'),                      #This Matter which will be displayed on
h5('2. Choose values for the predictors'),          #the sidebar
h5('3. Submit'),
hr(),
checkboxGroupInput("checkbox", label = h3("Select predictor/(s)"),              #middle part of sidebar
choices = list("Cylinders" = "cyl", "Horsepower" = "hp")),   #checkboxes for predictors
hr(),
h3('Select Values'),                                                       #the bottom portion of the sidebar
numericInput('cr', 'Number of cylinders', 4, min = 4, max = 8, step = 2),  #lets the user to select different values for
numericInput('hp', 'Gross horsepower', 50, min = 50, max = 350, step = 5), #number of cylinder and horsepower
hr(),
submitButton('Submit')
),
mainPanel(
h3('Result'),
h4('Predictors which were Selected'),                                     #
verbatimTextOutput("predictors"),                                         #
h4('MODEL'),                                                              #Result Page
verbatimTextOutput("model"),                                              #
h4('Predicted MPG'),                                                      #
verbatimTextOutput("prediction")                                          #
)
)
)
)
library(shiny)
shinyUI(
pageWithSidebar(
headerPanel("Miles/(US) gallon prediction"),
sidebarPanel(
h4('This is a simple application which uses the mtcars data set from R and it takes 2 variables which is "hp" and "cyl" which stands for horsepower and number of cylinders. Using these two variables we try to predict the mileage of that vehicle.',
h4('Follow the below 3 steps'),                      #
h5('1. Select predictor/(s)'),                      #This Matter which will be displayed on
h5('2. Choose values for the predictors'),          #the sidebar
h5('3. Submit'),
hr(),
checkboxGroupInput("checkbox", label = h3("Select predictor/(s)"),              #middle part of sidebar
choices = list("Cylinders" = "cyl", "Horsepower" = "hp")),   #checkboxes for predictors
hr(),
h3('Select Values'),                                                       #the bottom portion of the sidebar
numericInput('cr', 'Number of cylinders', 4, min = 4, max = 8, step = 2),  #lets the user to select different values for
numericInput('hp', 'Gross horsepower', 50, min = 50, max = 350, step = 5), #number of cylinder and horsepower
hr(),
submitButton('Submit')
),
mainPanel(
h3('Result'),
h4('Predictors which were Selected'),                                     #
verbatimTextOutput("predictors"),                                         #
h4('MODEL'),                                                              #Result Page
verbatimTextOutput("model"),                                              #
h4('Predicted MPG'),                                                      #
verbatimTextOutput("prediction")                                          #
)
)
))
library(shiny)
shinyUI(
pageWithSidebar(
headerPanel("Miles/(US) gallon prediction"),
sidebarPanel(
h4('This is a simple application which uses the mtcars data set from R and it takes 2 variables which is "hp" and "cyl" which stands for horsepower and number of cylinders. Using these two variables we try to predict the mileage of that vehicle.',
h4('Follow the below 3 steps'),                      #
h5('1. Select predictor/(s)'),                      #This Matter which will be displayed on
h5('2. Choose values for the predictors'),          #the sidebar
h5('3. Submit'),
hr(),
checkboxGroupInput("checkbox", label = h3("Select predictor/(s)"),              #middle part of sidebar
choices = list("Cylinders" = "cyl", "Horsepower" = "hp")),   #checkboxes for predictors
hr(),
h3('Select Values'),                                                       #the bottom portion of the sidebar
numericInput('cr', 'Number of cylinders', 4, min = 4, max = 8, step = 2),  #lets the user to select different values for
numericInput('hp', 'Gross horsepower', 50, min = 50, max = 350, step = 5), #number of cylinder and horsepower
hr(),
submitButton('Submit')
),
mainPanel(
h3('Result'),
h4('Predictors which were Selected'),                                     #
verbatimTextOutput("predictors"),                                         #
h4('MODEL'),                                                              #Result Page
verbatimTextOutput("model"),                                              #
h4('Predicted MPG'),                                                      #
verbatimTextOutput("prediction")                                          #
)
)
)
)
library(shiny)
shinyUI(
pageWithSidebar(
headerPanel("Miles/(US) gallon prediction"),
sidebarPanel(
h4('This is a simple application which uses the mtcars data set from R and it takes 2 variables which is "hp" and "cyl" which stands for horsepower and number of cylinders. Using these two variables we try to predict the mileage of that vehicle.'),
h4('Follow the below 3 steps'),                      #
h5('1. Select predictor/(s)'),                      #This Matter which will be displayed on
h5('2. Choose values for the predictors'),          #the sidebar
h5('3. Submit'),
hr(),
checkboxGroupInput("checkbox", label = h3("Select predictor/(s)"),              #middle part of sidebar
choices = list("Cylinders" = "cyl", "Horsepower" = "hp")),   #checkboxes for predictors
hr(),
h3('Select Values'),                                                       #the bottom portion of the sidebar
numericInput('cr', 'Number of cylinders', 4, min = 4, max = 8, step = 2),  #lets the user to select different values for
numericInput('hp', 'Gross horsepower', 50, min = 50, max = 350, step = 5), #number of cylinder and horsepower
hr(),
submitButton('Submit')
),
mainPanel(
h3('Result'),
h4('Predictors which were Selected'),                                     #
verbatimTextOutput("predictors"),                                         #
h4('MODEL'),                                                              #Result Page
verbatimTextOutput("model"),                                              #
h4('Predicted MPG'),                                                      #
verbatimTextOutput("prediction")                                          #
)
)
)
library(shiny)
library(datasets)
shinyServer(function(input, output) {
Text <- reactive({
x<-length(input$checkbox)
if (x==0)
{"Select a predictor"}
else if(x==1)
{paste(input$checkbox[1])}
else if(x==2)
{paste(input$checkbox[1],"+",input$checkbox[2])}
})
modelText <- reactive(paste("mpg ~", Text()))
output$predictors <-renderText({Text()})
output$model <- renderText({
if (length(input$checkbox)==0)
{"Select a predictor"}
else{modelText()}
})
output$prediction <- renderText({
if (length(input$checkbox)==0)
{"Select a predictor"}
else{
fit<-lm(as.formula(modelText()),data=mtcars)
c<-input$cyl
h<-input$hp
df<-data.frame(cyl=c,hp=h)
predict(fit,df) }
})
})
library(shiny)
shinyUI(
pageWithSidebar(
headerPanel("Miles/(US) gallon prediction"),
sidebarPanel(
h4('This is a simple application which uses the mtcars data set from R and it takes 2 variables which is "hp" and "cyl" which stands for horsepower and number of cylinders. Using these two variables we try to predict the mileage of that vehicle.'),
h4('Follow the below 3 steps'),                      #
h5('1. Select predictor/(s)'),                      #This Matter which will be displayed on
h5('2. Choose values for the predictors'),          #the sidebar
h5('3. Submit'),
hr(),
checkboxGroupInput("checkbox", label = h3("Select predictor/(s)"),              #middle part of sidebar
choices = list("Cylinders" = "cyl", "Horsepower" = "hp")),   #checkboxes for predictors
hr(),
h3('Select Values'),                                                       #the bottom portion of the sidebar
numericInput('cr', 'Number of cylinders', 4, min = 4, max = 8, step = 2),  #lets the user to select different values for
numericInput('hp', 'Gross horsepower', 50, min = 50, max = 350, step = 5), #number of cylinder and horsepower
hr(),
submitButton('Submit')
),
mainPanel(
h3('Result'),
h4('Predictors which were Selected'),                                     #
verbatimTextOutput("predictors"),                                         #
h4('MODEL'),                                                              #Result Page
verbatimTextOutput("model"),                                              #
h4('Predicted MPG'),                                                      #
verbatimTextOutput("prediction")                                          #
)
)
)
runApp()
runApp()
model = lm(mpg ~ as.factor(cyl)+ wt, data = mtcars)
summary(model)
new = relevel(mtcars$cyl, 8)
new = relevel(as.factor(mtcars$cyl), 8)
new = relevel(as.factor(mtcars$cyl), "8")
summary(lm ~ new + wt, data = mtcars)
summary(lm ~ new + wt, data = mtcars)$coeff
summary(lm ~ new + wt, data = mtcars)$coef
summary(lm(mpg ~ new + wt, data = mtcars))$coef
summary(model)
summary(lm(mpg ~ new + wt, data = mtcars))$coef
summary(lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(y~x)
?hatvalues
influence.measures(lm(y~x))
round(dfbetas(lm(y~x))[1 : 10, 2], 3
round(dfbetas(lm(y~x)))[1 : 10, 2], 3
round(dfbetas(lm(y~x)))[1 : 10, 2], 3
round(dfbetas(lm(y~x))[1 : 10, 2], 3)
round(dfbetas(lm(y~x))[1 : 4, 2], 3)
round(dfbetas(lm(y~x))[1 : 5, 2], 3)
library(AppliedPredictiveModeling)
library(caret)
library(rattle)
rm(list = ls())
data(mtcars)
mtcars$vs = as.factor(mtcars$vs)
set.seed(125)
model = train(am ~ ., method = 'rpart', data = mtcars)
print(model)
fancyRpartPlot(model$finalModel)
sampleData = mtcars[1,]
sampleData[1,names(sampleData)] = rep(NA, length(names(sampleData)))
sampleData[1, c('wt')] = c(4)
predict(model, sampleData[1,], verbose = TRUE)
data(segmentationOriginal)
training = subset(segmentationOriginal, Case == "Train")
testing = subset(segmentationOriginal, Case == "Test")
set.seed(125)
model = train(Class ~ ., method = 'rpart', data = training)
print(model)
fancyRpartPlot(model$finalModel)
sampleData = training[1,]
sampleData[1,names(sampleData)] = rep(NA, length(names(sampleData)))
sampleData = rbind(sampleData, sampleData)
sampleData = rbind(sampleData, sampleData)
keep = c('Case', 'Class', 'Cell')
#keep = c()
sampleData = training[1:4,]
sampleData[1,!(names(sampleData) %in% keep)] = rep(NA, length(names(sampleData))-length(keep))
sampleData[1, c('TotalIntenCh2', 'FiberWidthCh1', 'PerimStatusCh1')] = c(23000, 10, 2)
sampleData[2, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')] = c(50000, 10, 100)
sampleData[3, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')] = c(57000, 8, 100)
sampleData[4, c('FiberWidthCh1', 'VarIntenCh4', 'PerimStatusCh1')] = c(8, 100, 2)
predict(model, sampleData[2,], verbose = TRUE, type = c('prob'))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
model = train(y ~ ., method = 'rf', data = vowel.train, prox = TRUE, importance = TRUE)  # This takes some time...
print(model)
vi = varImp(model$finalModel)
vi
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
model = train(y ~ ., method = 'rf', data = vowel.train, prox = TRUE, importance = TRUE)  # This takes some time...
print(model)
vi = varImp(model$finalModel)
vi
rowMeans(vi)
order(rowMeans(vi))
library(pgmm)
data(olive)
olive = olive[,-1]
model = train(Area ~ ., method = 'rpart', data = olive)
fancyRpartPlot(model$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata)
install.packages("pgmm")
install.packages("pgmm")
library(AppliedPredictiveModeling)
library(caret)
library(rattle)
rm(list = ls())
data(mtcars)
mtcars$vs = as.factor(mtcars$vs)
set.seed(125)
model = train(am ~ ., method = 'rpart', data = mtcars)
print(model)
fancyRpartPlot(model$finalModel)
sampleData = mtcars[1,]
sampleData[1,names(sampleData)] = rep(NA, length(names(sampleData)))
sampleData[1, c('wt')] = c(4)
predict(model, sampleData[1,], verbose = TRUE)
# Question 1 --------------------------------------------------------------
rm(list = ls())
data(segmentationOriginal)
training = subset(segmentationOriginal, Case == "Train")
testing = subset(segmentationOriginal, Case == "Test")
set.seed(125)
model = train(Class ~ ., method = 'rpart', data = training)
print(model)
fancyRpartPlot(model$finalModel)
sampleData = training[1,]
sampleData[1,names(sampleData)] = rep(NA, length(names(sampleData)))
sampleData = rbind(sampleData, sampleData)
sampleData = rbind(sampleData, sampleData)
keep = c('Case', 'Class', 'Cell')
#keep = c()
sampleData = training[1:4,]
sampleData[1,!(names(sampleData) %in% keep)] = rep(NA, length(names(sampleData))-length(keep))
sampleData[1, c('TotalIntenCh2', 'FiberWidthCh1', 'PerimStatusCh1')] = c(23000, 10, 2)
sampleData[2, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')] = c(50000, 10, 100)
sampleData[3, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')] = c(57000, 8, 100)
sampleData[4, c('FiberWidthCh1', 'VarIntenCh4', 'PerimStatusCh1')] = c(8, 100, 2)
predict(model, sampleData[2,], verbose = TRUE, type = c('prob'))
summary(predict(model, sampleData[2,], verbose = TRUE, type = c('prob')))
summary(predict(model, sampleData[1,], verbose = TRUE, type = c('prob')))
summary(predict(model, sampleData[3,], verbose = TRUE, type = c('prob')))
summary(predict(model, sampleData[4,], verbose = TRUE, type = c('prob')))
data(olive)
install.packages("~/R/pgmm_1.0.tar.gz", repos = NULL, type = "source")
load("C:/Users/Akhilkumar/Documents/ielts/olive.rda")
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
model = train(Area ~ ., method = 'rpart', data = olive)
predict(model, newdata)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
model = train(y ~ ., method = 'rf', data = vowel.train, prox = TRUE, importance = TRUE)  # This takes some time...
print(model)
vi = varImp(model$finalModel)
vi
rowMeans(vi)
data(olive)
olive = olive[,-1]
model = train(Area ~ ., method = 'rpart', data = olive)
fancyRpartPlot(model$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata)
load("C:/Users/Akhilkumar/Documents/ielts/olive.rda")
data(olive)
olive = olive[,-1]
model = train(Area ~ ., method = 'rpart', data = olive)
fancyRpartPlot(model$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata)
summary(predict(model, newdata))
str(predict(model, newdata))
model = randomForest(Area ~ .,data = olive)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
model = randomForest(y ~ ., data = vowel.train, prox = TRUE, importance = TRUE)  # This takes some time...
print(model)
vi = varImp(model$finalModel)
vi
install.packages("devtools")
library(devtools)
install.packages("Rtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
author("slidify")
library(shiny)
library(datasets)
shinyServer(function(input, output) {
Text <- reactive({
x<-length(input$checkbox)
if (x==0)
{"Select a predictor"}
else if(x==1)
{paste(input$checkbox[1])}
else if(x==2)
{paste(input$checkbox[1],"+",input$checkbox[2])}
})
modelText <- reactive(paste("mpg ~", Text()))
output$predictors <-renderText({Text()})
output$model <- renderText({
if (length(input$checkbox)==0)
{"Select a predictor"}
else{modelText()}
})
output$prediction <- renderText({
if (length(input$checkbox)==0)
{"Select a predictor"}
else{
fit<-lm(as.formula(modelText()),data=mtcars)
c<-input$cyl
h<-input$hp
df<-data.frame(cyl=c,hp=h)
predict(fit,df) }
})
})
library(shiny)
shinyUI(
pageWithSidebar(
headerPanel("Developing Data Products"),
sidebarPanel(
h4('This is a simple application which uses the mtcars data set from R and it takes 2 variables which is "hp" and "cyl" which stands for horsepower and number of cylinders. Using these two variables we try to predict the mileage of that vehicle.'),
hr(),
h4('Follow the below 3 steps'),                      #
h5('1. Select predictor/(s)'),                      #This Matter which will be displayed on
h5('2. Choose values for the predictors'),          #the sidebar
h5('3. Submit'),
hr(),
checkboxGroupInput("checkbox", label = h3("Select predictor/(s)"),              #middle part of sidebar
choices = list("Cylinders" = "cyl", "Horsepower" = "hp")),   #checkboxes for predictors
hr(),
h3('Select Values'),                                                       #the bottom portion of the sidebar
numericInput('cr', 'Number of cylinders', 4, min = 4, max = 8, step = 2),  #lets the user to select different values for
numericInput('hp', 'Gross horsepower', 50, min = 50, max = 350, step = 5), #number of cylinder and horsepower
hr(),
submitButton('Submit')
),
mainPanel(
h3('Result'),
h4('Predictors which were Selected'),                                     #
verbatimTextOutput("predictors"),                                         #
h4('MODEL'),                                                              #Result Page
verbatimTextOutput("model"),                                              #
h4('Predicted MPG'),                                                      #
verbatimTextOutput("prediction")                                          #
)
)
)
runApp()
setwd("C:\Users\Akhilkumar\Documents\GitHub\Developing-Data-Products")
setwd("C:/Users/Akhilkumar/Documents/GitHub/Developing-Data-Products")
runApp()
slidify("index.Rmd")
setwd("C:/Users/Akhilkumar/Documents/GitHub/Developing-Data-Products/slidify")
slidify("index.Rmd")
